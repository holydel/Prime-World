using EditorLib;
using EditorLib.Extensions;
using libdb.DB;
using System.Drawing;
using System.IO;
using EditorLib.IO;
using libdb.IO;
using System;
using libdb.Diagnostics;
using EditorNative;

namespace EditorPlugins.Importer.Texture
{
  public class TextureImporter : Importer<DBTypes.Texture>
  {
    protected override bool KnownDuration { get { return false; } }
    public static bool IsPow2( int i ) { return ( ( i & ( i - 1 ) ) == 0 ); }

    public static Bitmap LoadImage( SourceFileSystem sourceFileSystem, string sourceFileName )
    {
      using ( Stream stream = sourceFileSystem.OpenFile( sourceFileName ) )
      {
        if ( stream == null )
        {
          Log.TraceError( "Cannot load source texture \"{0}\"", sourceFileName );
          return null;
        }

        if ( string.Compare( Path.GetExtension( sourceFileName ), ".tga", StringComparison.InvariantCultureIgnoreCase ) == 0 )
          return TgaReader.LoadImage( stream );
        else
          return new Bitmap( stream );
      }
    }

		public static bool ImportImage( Bitmap image, IFileSystem outputFileSystem, string outputFileName, DBTypes.Texture options )
		{
      if ( image == null )
        return false;

			int[] passes = null;
			if ( !string.IsNullOrEmpty( options.mipSharpenPasses ) )
			{
				string[] passesValues = options.mipSharpenPasses.Split( ' ' );
				if ( passesValues.Length > 0 )
				{
					passes = new int[passesValues.Length + 1];
					passes[0] = 0;
					for ( int i = 0; i < passesValues.Length; ++i )
					{
						int pass = 0;
						if ( int.TryParse( passesValues[i], out pass ) )
							passes[i + 1] = pass;
						else
						{
							Log.TraceWarning( "Invalid pass value \"{0}\" in mipSharpenPasses \"{1}\"", passesValues[i], options.mipSharpenPasses );
							passes[i + 1] = 0;
						}
					}
				}
			}

			using ( Stream output = outputFileSystem.CreateFile( outputFileName ) )
			{
				if ( output == null )
				{
					Log.TraceError( "Cannot create destination texture \"{0}\"", outputFileName );
					return false;
				}
        /*string defaultValue = "2 4 1 3";
        string caption = @"Format: type [param1] [param2] [param3]
(type: 0 - box, 1 - triangle, 
2 - Kaiser( alpha, stretch, width ),
3 - Lanczos, 4 - Mitchell( b, c ), 5 - Sinc( w )";

        string response = SimpleTextEntryForm.InputBox( caption, "Filter Parameters", defaultValue );/**/

        int fType = 3;
        float fParam1 = 4.0f;
        float fParam2 = 1.0f;
        float fParam3 = 3.0f;

        /*string[] parts = response.Split();
        if ( parts.Length > 0 )
          fType = int.Parse( parts[0] );
        if ( parts.Length > 1 )
          fParam1 = float.Parse( parts[1], System.Globalization.CultureInfo.InvariantCulture );
        if ( parts.Length > 2 )
          fParam2 = float.Parse( parts[2], System.Globalization.CultureInfo.InvariantCulture );
        if ( parts.Length > 3 )
          fParam3 = float.Parse( parts[3], System.Globalization.CultureInfo.InvariantCulture );/**/

				return EditorNative.TextureImporter.TextureImporter.Import( image, output, options.pixelFormat,
          options.textureType == DBTypes.TextureType.Normal, options.mipLevelUsage == DBTypes.MipLevel.NoMips, options.startMipLevel, passes, 
          fType, fParam1, fParam2, fParam3 );
			}
		}

    protected override bool Process( DBPtr<DBTypes.Texture> resource, IEditorCommonApplication application, bool fast )
    {
      DBTypes.Texture texture = resource.Get();
      if ( string.IsNullOrEmpty( texture.srcFileName.FileName ) && !string.IsNullOrEmpty( texture.generatedFileName ) )
      {
        Log.TraceMessage( "Skipping autogenerated particles fx texture \"{0}\"", texture.generatedFileName );
        return true;
      }

      Bitmap image = LoadImage( application.SourceFileSystem, texture.srcFileName.FileName );
      if ( image == null )
        return false;

      int realSizeX = Scene.Utility.GetRealSize( image.Width, texture.startMipLevel );
      int realSizeY = Scene.Utility.GetRealSize( image.Height, texture.startMipLevel );
      if ( texture.GetType() == typeof( DBTypes.Texture ) )
      {
        if ( !IsPow2( realSizeX ) || !IsPow2( realSizeY ) )
        {
          Log.TraceError( "Texture({0}) size({1}x{2}) is not power of 2", resource.DBId.GetFullFileName(), realSizeX, realSizeY );
          return false;
        }
      }

      if ( !ImportImage( image, application.FileSystem, texture.textureFileName, texture ) )
        return false;

      texture.size.width = image.Width >> texture.startMipLevel;
      texture.size.height = image.Height >> texture.startMipLevel;

      EditorRender.ResetTexture( texture.textureFileName );
      return true;
    }
  }
}
