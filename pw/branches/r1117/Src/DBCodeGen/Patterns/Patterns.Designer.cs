//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBCodeGen.Patterns {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Patterns {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Patterns() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DBCodeGen.Patterns.Patterns", typeof(Patterns).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #pragma once
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///namespace $(SrcAssembly)
        ///{
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///struct HashCheck
        ///{
        ///	static bool Check()
        ///	{
        ///		static const char* hashFileName = &quot;$(HashFileName)&quot;;
        ///		static const unsigned char hash[] = { $(HashArray) };
        ///		static const int hashLength = sizeof( hash ) / si [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HashCheckCpp {
            get {
                return ResourceManager.GetString("HashCheckCpp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using libdb.Diagnostics;
        ///using System.IO;
        ///using libdb.DB;
        ///
        ///namespace $(ProjectName)
        ///{
        ///	public static class $(SrcAssembly)Hash
        ///	{
        ///		private static string hashFileName = &quot;$(HashFileName)&quot;;
        ///		private static byte[] hash = new byte[] { $(HashArray) };
        ///
        ///		public static bool Check()
        ///		{
        ///			Stream file = DataBase.FileSystem.OpenFile( hashFileName );
        ///			if ( file == null )
        ///			{
        ///				Log.TraceError( &quot;Cannot open file \&quot;{0}\&quot; with database descriptor&quot;, hashFileName );
        ///				return false;
        ///			}
        ///
        ///			if ( [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string HashCheckCs {
            get {
                return ResourceManager.GetString("HashCheckCs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на class $(MaterialName) : public $(GroupName)
        ///{
        ///private:
        ///  $(MaterialName)() : $(GroupName)( NDb::$(MaterialName)::priority, NDb::$(MaterialName)::flags, Render::RenderResourceManager::GetShaderIndexByTypeId($(MaterialName)::typeId) )
        ///  {
        ///    CheckTypesSizes();
        ///    InitSamplers();
        ///  }
        ///	
        ///	$(MaterialFields)
        ///	NDb::Ptr&lt;NDb::$(MaterialName)&gt; pDbMaterial;
        ///
        ///	unsigned int GetDynamicShaderIndex() const
        ///	{
        ///		return $(DynamicShaderIndexCalculation);
        ///	}
        ///
        ///	void UpdateStaticShaderIndex()
        ///	{
        ///		staticShade [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialCode {
            get {
                return ResourceManager.GetString("MaterialCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на class $(GroupName) : public $(BaseGroupName)
        ///{
        ///protected:
        ///  $(GroupName)( int priority, int flags, int shaderIndex ) : $(BaseGroupName)( priority, flags, shaderIndex ) {}
        ///public:
        ///  $(GroupFunctions);
        ///};.
        /// </summary>
        internal static string MaterialGroup {
            get {
                return ResourceManager.GetString("MaterialGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на //////////////////////////////////////////////////////////////////////////////////////////
        ///// THIS FILE WAS GENERATED AUTOMATICALLY! DON&apos;T CHANGE IT&apos;S CONTENTS
        /////////////////////////////////////////////////////////////////////////////////////////////
        ///#include &quot;stdafx.h&quot;
        ///
        ///#include &quot;$(MaterialSpecFileName).h&quot;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///static $(ProjectName)::$(RuntimePinsClassName)* pRuntimePins = 0;
        //// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialSpecCode {
            get {
                return ResourceManager.GetString("MaterialSpecCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на //////////////////////////////////////////////////////////////////////////////////////////
        ///// THIS FILE WAS GENERATED AUTOMATICALLY! DON&apos;T CHANGE IT&apos;S CONTENTS
        /////////////////////////////////////////////////////////////////////////////////////////////
        ///#include &quot;stdafx.h&quot;
        ///
        ///#include &quot;../Render/GlobalMasks.h&quot;
        ///#include &quot;$(MaterialSpecFileName).h&quot;
        ///#include &quot;../libdb/AnimatedWrapper.h&quot;
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialSpecFinalCode {
            get {
                return ResourceManager.GetString("MaterialSpecFinalCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на //////////////////////////////////////////////////////////////////////////////////////////
        ///// THIS FILE WAS GENERATED AUTOMATICALLY! DON&apos;T CHANGE IT&apos;S CONTENTS
        /////////////////////////////////////////////////////////////////////////////////////////////
        ///#pragma once
        ///
        ///#include &quot;../Render/renderer.h&quot;
        ///#include &quot;../Render/GlobalMasks.h&quot;
        ///#include &quot;../Render/Material.h&quot;
        ///$(IncludeMaterialDbHeaders)
        ///#include &quot;../Render/RenderResourceManager.h&quot;
        ///#include &quot;../libdb/AnimatedWrapper.h&quot;
        ///#include &quot;../$(ProjectsWit [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialSpecFinalHeader {
            get {
                return ResourceManager.GetString("MaterialSpecFinalHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на //////////////////////////////////////////////////////////////////////////////////////////
        ///// THIS FILE WAS GENERATED AUTOMATICALLY! DON&apos;T CHANGE IT&apos;S CONTENTS
        /////////////////////////////////////////////////////////////////////////////////////////////
        ///#pragma once
        ///
        ///#include &quot;../Render/renderer.h&quot;
        ///#include &quot;../Render/GlobalMasks.h&quot;
        ///#include &quot;../Render/Material.h&quot;
        ///$(IncludeMaterialDbHeaders)
        ///#include &quot;../Render/RenderResourceManager.h&quot;
        ///#include &quot;../libdb/AnimatedWrapper.h&quot;
        ///////////////////////////// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MaterialSpecHeader {
            get {
                return ResourceManager.GetString("MaterialSpecHeader", resourceCulture);
            }
        }
    }
}
